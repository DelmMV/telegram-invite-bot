const logger = require('../utils/logger');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param {number} userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
function isAdmin(userId) {
  const adminIds = process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim()));
  return adminIds.includes(userId);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * @returns {Array<number>} - –ú–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
function getAdminIds() {
  return process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim()));
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
 * @param {Object} applicant - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è
 * @param {Map<number, Map<number, number>>} adminMessageIds - –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Promise<void>}
 */
async function notifyAdmins(bot, applicant, adminMessageIds) {
  const adminIds = getAdminIds();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
  if (!adminMessageIds.has(applicant.userId)) {
    adminMessageIds.set(applicant.userId, new Map());
  }
  
  const applicantMessageMap = adminMessageIds.get(applicant.userId);
  
  for (const adminId of adminIds) {
    try {
      const message = await bot.telegram.sendMessage(
        adminId,
        `üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>\n\n` +
        `<b>–ò–º—è:</b> ${applicant.firstName} ${applicant.lastName}\n` +
        `<b>Username:</b> ${applicant.username ? '@' + applicant.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>ID:</b> ${applicant.userId}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ:`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `approve_${applicant.userId}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${applicant.userId}` }
              ]
            ]
          }
        }
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
      applicantMessageMap.set(adminId, message.message_id);
      
      logger.info(`Notification sent to admin ${adminId} about application from user ${applicant.userId}`);
    } catch (error) {
      logger.error(`Failed to notify admin ${adminId}: ${error.message}`);
    }
  }
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
 * @param {Object} application - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
 * @param {Object} adminWhoProcessed - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ, –æ–±—Ä–∞–±–æ—Ç–∞–≤—à–µ–º –∑–∞—è–≤–∫—É
 * @param {Map<number, number>} adminMessagesMap - –ö–∞—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º (adminId -> messageId)
 * @returns {Promise<void>}
 */
async function notifyAdminsAboutUpdate(bot, application, adminWhoProcessed, adminMessagesMap) {
  const adminIds = getAdminIds();
  
  for (const adminId of adminIds) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞—è–≤–∫—É (–æ–Ω —É–∂–µ –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    if (adminId === adminWhoProcessed.id) continue;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    const messageId = adminMessagesMap.get(adminId);
    if (!messageId) {
      logger.warn(`No message ID found for admin ${adminId} for application ${application.userId}`);
      continue;
    }
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏
      let statusText, statusEmoji;
      if (application.status === 'approved') {
        statusText = '–û–¥–æ–±—Ä–µ–Ω–æ';
        statusEmoji = '‚úÖ';
      } else {
        statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        statusEmoji = '‚ùå';
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
      await bot.telegram.editMessageText(
        adminId, 
        messageId,
        null, 
        `üîî <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>\n\n` +
        `<b>–ò–º—è:</b> ${application.firstName} ${application.lastName}\n` +
        `<b>Username:</b> ${application.username ? '@' + application.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>ID:</b> ${application.userId}\n\n` +
        `<b>–†–µ—à–µ–Ω–∏–µ:</b> ${statusText} ${statusEmoji}\n` +
        `<b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> ${adminWhoProcessed.first_name} ${adminWhoProcessed.last_name || ''}\n` +
        `<b>–î–∞—Ç–∞:</b> ${new Date(application.processedAt).toLocaleString()}`,
        { 
          parse_mode: 'HTML',
          reply_markup: { inline_keyboard: [] }
        }
      );
      
      logger.info(`Notification updated for admin ${adminId} about application status change for user ${application.userId}`);
    } catch (error) {
      logger.error(`Failed to update notification for admin ${adminId}: ${error.message}`);
    }
  }
}

module.exports = {
  isAdmin,
  getAdminIds,
  notifyAdmins,
  notifyAdminsAboutUpdate
};