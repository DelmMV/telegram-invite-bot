const logger = require('../utils/logger');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param {number} userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
function isAdmin(userId) {
  const adminIds = process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim()));
  return adminIds.includes(userId);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * @returns {Array<number>} - –ú–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
function getAdminIds() {
  return process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim()));
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
 * @param {Object} applicant - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è
 * @returns {Promise<void>}
 */
async function notifyAdmins(bot, applicant) {
  const adminIds = getAdminIds();
  
  for (const adminId of adminIds) {
    try {
      await bot.telegram.sendMessage(
        adminId,
        `üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>\n\n` +
        `<b>–ò–º—è:</b> ${applicant.firstName} ${applicant.lastName}\n` +
        `<b>Username:</b> ${applicant.username ? '@' + applicant.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>ID:</b> ${applicant.userId}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ:`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `approve_${applicant.userId}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${applicant.userId}` }
              ]
            ]
          }
        }
      );
      logger.info(`Notification sent to admin ${adminId} about application from user ${applicant.userId}`);
    } catch (error) {
      logger.error(`Failed to notify admin ${adminId}: ${error.message}`);
    }
  }
}

module.exports = {
  isAdmin,
  getAdminIds,
  notifyAdmins
};